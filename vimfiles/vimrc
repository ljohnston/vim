" Modeline & Notes {{{
" vim: set sw=4 ts=4 sts=4 et tw=79 foldlevel=0 foldmethod=marker foldmarker={{{,}}}:
"
" My .vimrc - Always needs lots of work. See the TODO section for things on
" the list.
"
" Development Notes {{{
"   Debugging: Can insert 'echom "<msg>"' to show mesages in the cmd window.
"   These typically will disappear when output from .vimrc but can be
"   displayed with ':messages'.
"
" }}}
" }}}

" NeoBundle Setup & Plugins {{{

if &compatible
    set nocompatible
endif

set runtimepath^=~/.vim/bundle/neobundle.vim/

call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle.
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/unite.vim' 
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin'  : 'make -f make_cygwin.mak',
\     'mac'     : 'make -f make_mac.mak',
\     'linux'   : 'make',
\     'unix'    : 'gmake',
\    },
\ }

NeoBundle 'Shougo/neocomplete'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'

NeoBundle 'Shougo/neoyank.vim'
NeoBundle 'Shougo/neopairs.vim'

NeoBundle 'Shougo/vimfiler.vim'

NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-surround'

NeoBundle 'jeetsukumaran/vim-buffergator'     

NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'

NeoBundle 'flazz/vim-colorschemes'

NeoBundle 'rodjek/vim-puppet'
NeoBundle 'markcornick/vim-terraform'
NeoBundle 'lmeijvogel/vim-yaml-helper'

NeoBundle 'luochen1990/rainbow'
NeoBundle 'mtth/scratch.vim'
NeoBundle 'ervandew/supertab'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'godlygeek/tabular'
NeoBundle 'tomtom/tcomment_vim'

NeoBundle 'jiangmiao/auto-pairs'

NeoBundle 'vim-scripts/groovyindent-unix'

NeoBundle 'vimwiki/vimwiki'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup, this will prompt 
" you to install them.
NeoBundleCheck

" }}}

" Environment {{{

silent function! OSX()
    return has('macunix')
endfunction

silent function! LINUX()
    return has('unix') && !has('macunix') && !has('win32unix')
endfunction

silent function! WINDOWS()
    return  (has('win32') || has('win64'))
endfunction

" Don't see myself ever using windows again, but you never know... this may
" come in handy.
" if WINDOWS()
"   set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
" endif
" }}}

" General {{{
syntax on

set fileformats=unix 
set history=100
set ttyfast                             

set ruler                               "show cursor position

set scrolloff=3                         "context lines when scrolling
set sidescrolloff=5                     "context columns when scrolling

set laststatus=2                        "always show status line
set showmode                            "display mode at bottom of screen
set showcmd                             "show commands at bottom of screen

set cursorline                          "hightlight current line
set colorcolumn=81                      "make 80 columns obvious

set nostartofline                       "try to leave cursor in same column
set virtualedit=all                     "allow cursor where no actual characters exist

set backspace=indent,eol,start          "a better backspace

set autoread                            "detect external file changes
set hidden                              "change buffers without saving

set showmatch                           "show matching character pair

set wildmenu                            "enhanced autocomplete
set wildmode=longest,list,full          "autocomplete behavior

set ignorecase                          "ignore case in search, regex
set smartcase                           "only ignore case if patter is all lower

set hlsearch                            "highlight search results
set incsearch                           "search incremntally

set cmdheight=3                         "(try to) silence 'Press ENTER or type command to continue' prompt

autocmd BufEnter * silent! lcd %:p:h    "cwd tracks current current file

" Silence the damn bell
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

"System clipboard integration.
if has('unix') && exists('+xterm_clipboard')
    set clipboard+=unnamedplus
else
    set clipboard+=unnamed
endif

if OSX() || LINUX()
    " The ^= will prepend our setting to any the existing list.
    " The // at the end will fully qualify the filenames used for each.
    set backupdir^=~/.vim/.backup//
    set directory^=~/.vim/.swp//
    set undodir^=~/.vim/.undo//

    " Don't want to prepend this one, nor can we use // here.
    set viewdir=~/.vim/.view
endif
" }}}

" Indenting & Tabs {{{
    set autoindent
    set smartindent

    set expandtab
    set shiftwidth=4
    set softtabstop=4
" }}}

" Keys {{{

"let mapleader = "\<Space>"
"let g:mapleader = "\<Space>"
let mapleader = ","
let g:mapleader = ","

" It's tempting to make the <leader>ve, but that results in our :Explore key
" maping (<leader>e) not responding like we'd like it to.
:nnoremap <leader>ve :vsplit $MYVIMRC<cr>

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" scroll up/down without moving the cursor
noremap <c-k> 1<c-u>
noremap <c-j> 1<c-d>

" Some cool stuff I got from http://howivim.com/2015/steve-francia/ {{
" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

nnoremap < <l
nnoremap > >l

" Allow using the repeat operator with a visual selection (!)
vnoremap . :normal .<CR>

" Use the black hole register to paste without overwriting the unnamed
" register.
vnoremap p "_dP

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Overwrite current character with one from line above. NOTE that this ONLY
" works with "virtualedit" equals "all". To do this right, we'd probably need a
" functiont that could save, set, restore vitualedit. And would (hopefully?) be
" more efficient (as this is VERY slow).
" nnoremap <c-k> kyljv"0pl
" inoremap <c-k> <esc>lkyljv"0pli

" Tab navigation.
nnoremap <S-H> gT
nnoremap <S-L> gt

" Beginning / end of line.
nnoremap <c-h> ^
nnoremap <c-l> $

" These become useful when using an auto-close plugin.
inoremap <c-h> <c-o>h
inoremap <c-l> <c-o>l

"
" Command mode mappings.
" Note that these match cvim.
"

" forward/backward char
cnoremap <c-l> <right>
cnoremap <c-h> <left>

" forward/backward word
cnoremap <c-y> <s-left>
cnoremap <c-o> <s-right>

" begin/end of line
" default begin: <c-b> 
"   default end: <c-e> 

" up/down line
cnoremap <c-j> <down>
cnoremap <c-k> <up>

" delete char / word
cnoremap <c-x> <del>
" default word: <c-w>

" Write buffers.
nnoremap <leader>w :w!<cr>
nnoremap <leader>W :wa!<cr>

" Delete buffer.
nnoremap <c-q> :bdelete<cr>

" Last buffer.
" TODO: Would like to have this in insert mode, but that presents issues.
" Specifically, we have to leave insert mode in this buffer to switch buffers.
" We could reset ourselves to insert mode _after_ we switch buffers, but then
" we'd be in insert mode in the buffer we switch to, which is probably not what
" we want. Rather, we probably want to move around in that buffer and then come
" back to the original buffer, picking up where we left off in insert mode.
" nnoremap <C-space> <C-^>
nnoremap <leader>, <C-^>

" Ideally, used in split window with desired diff buffers open.
nnoremap <leader>dt :windo diffthis<CR>
nnoremap <leader>do :windo diffoff<CR>
nnoremap <leader>du :diffupdate<CR>

augroup VimDiff
    autocmd!
    autocmd VimEnter,FileWritePre * 
        \   nnoremap <expr> <C-j> &diff ? ']c' : '<Nop>' 
        \ | nnoremap <expr> <C-k> &diff ? '[c' : '<Nop>'
        \ | nnoremap <expr> <leader>dg &diff ? ':diffget<CR>' : '<Nop>'
        \ | nnoremap <expr> <leader>dp &diff ? ':diffput<CR>' : '<Nop>'
        \ | if &diff | set diffopt=filler,context=10000 | endif
augroup END

" Build with gradle.
nnoremap <leader>gb :compiler gradlew<CR> :make compile<CR>
nnoremap <leader>gt :compiler gradlew<CR> :make test<CR>

"
" <C-o> instead of <esc> to reduce side-effects. More here:
"
"   http://vim.wikia.com/wiki/Use_Ctrl-O_instead_of_Esc_in_insert_mode_mappings
"

nnoremap <C-\> :set cursorcolumn!<cr>
imap <C-\> <C-o><C-\>

" <tab> to move to matching paren, bracket, etc.
nnoremap <tab> %
vnoremap <tab> %

" Toggle line numbers.
nnoremap <C-n> :call CycleNumber()<cr>
inoremap <C-n> <C-o><C-n>

" Turn current highlight off.
nnoremap <silent> <leader>/ :noh<cr>

nnoremap <leader>e :VimFilerBufferDir<cr>
nnoremap <leader>E :VimFilerSplit<cr>

" Search for my section headers.
nnoremap <leader>s /^.*-\{40,80}\n^.*\[.*\]\s*\_.\{-}-\{40,80}\s*$<cr>
" }}}

" Autocommands {{{
" Ruby {{{
    " ruby standard 2 spaces, always
    autocmd BufRead,BufNewFile *.rb,*.rhtml setlocal shiftwidth=2 
    autocmd BufRead,BufNewFile *.rb,*.rhtml setlocal softtabstop=2 
" }}}

" Terrafrom {{{
    autocmd FileType terraform setlocal shiftwidth=2 
    autocmd FileType terraform setlocal softtabstop=2 
    autocmd FileType terraform setlocal commentstring=#\ %s
" }}}

" yaml {{{
    autocmd FileType yaml setlocal shiftwidth=2 
    autocmd FileType yaml setlocal softtabstop=2 
    autocmd FileType yaml setlocal commentstring=#\ %s
" }}}

" Strip trailing whitespace from these files.
autocmd FileType groovy,java,python,puppet,ruby,terraform autocmd BufWritePre <buffer> %s/\s\+$//e


" gradle {
    autocmd BufNewFile,BufRead *.gradle setfiletype groovy
" }

" shell scripts {
"    autocmd FileType sh setlocal shiftwidth=2
"    autocmd FileType sh setlocal softtabstop=2
" }

" reread .vimrc on save
autocmd! BufWritePost .vimrc source % 

" prevent our .vimrc modeline from closing all our folds on save
autocmd! BufWritePre .vimrc setlocal nomodeline

"
" wrap lines in .txt files.
" When writing text-based documentation, automatically wrap text.
" Ideally _don't_ wrap text for entering strings to be entered on
" the command-line. We should be able to achieve this by setting
" # and $ as comment characters and not including 'c' in the
" formatoptions. Looks like I may be understanding this incorrectly
" and it may not be possible. Rather it appears that 't' is _all_
" text (including comments), and 'c' is comments only.
"

autocmd BufRead,BufNewFile *.txt setlocal textwidth=72
autocmd BufRead,BufNewFile *.txt setlocal formatoptions=tq

"
" Turn off handling of '-' as a bullet (sort of).
" Without this, we get (for wrapped lines):
" - some text ...
"   another line ...
" yet another line.
"
" Note that we can get _all_ of the above lines to indent within
" the paragraph by setting 'autoindent'.
"

autocmd BufRead,BufNewFile *.txt setlocal comments-=fb:-

" python comment indents are all hosed up. This will fix it.
" See: http://stackoverflow.com/questions/2360249
autocmd BufRead,BufNewFile *.py inoremap # X<c-h>#<space>

autocmd FileType vimwiki,puppet setlocal textwidth=78

"}}}

" GUI {{{
if has("gui_running")

    " Enable rainbow (can toggle via :RainbowToggle).
    let g:rainbow_active = 1

    " 
    " For a good resource regarding how to pick and set a font, see:
    "
    "   http://www.scholarslab.org/grad-student-research/vim-gui-font-magic/
    "

    if OSX()
        " set transparency=10
        set guifont=Sauce\ Code\ Powerline:h18
        set columns=160
        set lines=48
    elseif LINUX()
        set guifont=Source\ Code\ Pro\ for\ Powerline\ Medium\ 10
        set columns=120
        set lines=52
    else
        set guifont="Courier 10 Pitch":h10
        set columns=120
        set lines=64
    endif

    set guioptions-=T           " turn off the toolbar
    set guioptions-=L           " no scrollbars on the left
endif
" }}}

" Colors {{{

"
" Got the following colorscheme stuff from:
"
" https://github.com/megaannum/colorschemer/blob/master/autoload/colorschemer/viewer.vim
"

" used to capture the Color Scheme name in GetColorSchemeName
let s:colorsname = ""

function! s:GetColorSchemeName()
  if exists("g:colors_name")
    return g:colors_name
  else
    if exists("s:colorsname")
      unlet s:colorsname
    endif

    execute "redir => s:colorsname"
    silent execute "colorscheme"
    execute "redir END"
    let s:colorsname = s:colorsname[1:]
    return s:colorsname
  endif
endfunction

" set background=light

" I like these colorschemes, and have customizations setup for them below.
" Commented out here so I have a convenient list.
" colorscheme molokai 
" colorscheme solarized 
" colorscheme professional 

if has("gui_running")
    " colorscheme onedark
    " colorscheme professional
    " colorscheme molokai
    " colorscheme solarized
    " colorscheme desert
    colorscheme neodark
else
    colorscheme molokai
endif

"
" I'm not interested in creating my own versions of various color
" schemes. I do, however, want to be able to tweak the ones I use if
" necessary, so we'll do that here.
"
" TODO: Is there a better way to achieve the tweaks we want?
" 

let cname = s:GetColorSchemeName()

if cname == 'onedark'
    " highlight Comment guifg=SlateGray4 ctermfg=67
elseif cname == 'neodark'
    highlight Normal guibg=gray18
elseif cname == 'molokai'
    " Better cursor line colors.
    highlight CursorLine guibg=Gray27 ctermbg=238
    highlight CursorColumn guibg=Gray27 ctermbg=238

    " Default column color (i.e. column 80 indicator) sucks (it's red!).
    " highlight ColorColumn guibg=DarkSlateGray

    " Default comment color too dark.
    highlight Comment guifg=SkyBlue3 ctermfg=67

    " Default visual selection needs more contrast.
    highlight Visual guifg=Gray30 guibg=NavajoWhite
    " highlight Visual guibg=gray30
elseif cname == 'solarized' || cname == 'desert'
    highlight ColorColumn guibg=DarkSlateGray
elseif cname == 'professional'
    highlight ColorColumn guibg=BlanchedAlmond
endif

" }}}

" Airline {{{
    " let g:airline_theme = 'bubblegum'
    let g:airline_theme = 'molokai'
    " let g:airline_theme = 'onedark'
    let g:airline_powerline_fonts = 1
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.space = "\ua0"
" }}}

let g:vim_yaml_helper#auto_display_path = 1

" Buffergator {{{
    let g:buffergator_autoexpand_on_split = 0
    let g:buffergator_sort_regime = "filepath"
    let g:buffergator_viewport_split_policy = "T"
    let g:buffergator_split_size = 15

    " TODO: Unmap buffergator's tab handling keys. Why did I add this?
" }}}

" NOTE: Temporarily replacing netrw with vimfiler. May make this permanent.
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_restore_alternate_file = 1
" " Netrw {{{
"     let g:netrw_keepdir = 0
"     let g:netrw_special_syntax = 1
"     let g:netrw_altfile = 1
"     let g:netrw_banner = 0
" " }}}

" SuperTab {{{
    " <c-space> is gobally mapped to :buffer#, but there seems
    " to be no conflict here.
    let g:SuperTabMappingForward = '<c-space>'
    let g:SuperTabMappingBackward = '<s-c-space>'

    let g:SuperTabDefaultCompletionType = "context"
    let g:SuperTabContextDefaultCompletionType = "<c-n>"
" }}}

" VimWiki {{{
    silent! nunmap <leader>ww
    silent! nunmap <leader>wi
    silent! nunmap <leader>ws
    silent! nunmap <leader>wt
    silent! nunmap <leader>w<leader>t
    silent! nunmap <leader>w<leader>w
    silent! nunmap <leader>w<leader>i
     
    nmap <leader>vw <Plug>VimwikiIndex
    nmap <leader>vi <Plug>VimwikiTabIndex
    nmap <leader>vs <Plug>VimwikiUISelect
    nmap <leader>vr <Plug>VimwikiRenameLink
    nmap <leader>vdw <Plug>VimwikiDiaryIndex
    nmap <leader>vdt <Plug>VimwikiTabMakeDiaryNote
    nmap <leader>vdn <Plug>VimwikiMakeDiaryNote
    nmap <leader>vdg <Plug>VimwikiDiaryGenerateLinks

    " Must remap this one as vimwiki maps it to <c-space> by default
    " which I want mapped to ":buffer#" everywhere.
    nnoremap <leader>tt <Plug>VimwikiToggleListItem
" }}}

call vimfiler#custom#profile('default', 'context', {
           \  'force_quit': 1,
           \ })

" Custom mappings for vimfiler buffers
autocmd FileType vimfiler call s:vimfiler_settings()
autocmd FileType vimfiler setlocal nobuflisted

function! s:vimfiler_settings()
  " <Space> is my leader key and I don't want it to get taken over here.
  silent! nunmap <buffer> <Space>

  " By default <Space> toggles file mark, but we just unmapped that.
  nmap <buffer> gm <Plug>(vimfiler_toggle_mark_current_line)
  map  <buffer> -  <Plug>(vimfiler_switch_to_parent_directory)
endfunction

" Unite {{{

"
" When we're bootstrapping our vim setup (via bin/setup in our vim git
" project), we can run into a chicke/egg sort of thing here that throws some
" warnings. Seems when installing via the neobundle command line call, that
" .vimrc gets entirely read before plugins get installed. We can eliminate
" these warnings with the following if statement.
"

function! ConfigureUnite()
    
    "
    " I don't really understand how to use this plugin, some things
    " I've done:
    "
    " Grep cursor word from file's subdir:
    "   UniteWithCursorWord -silent -auto-preview -winheight=40 -no-quit grep
    " Grep cursor work from project root:
    "   UniteWithCursorWord -silent -auto-preview -winheight=40 -no-quit grep:!
    "
    
    "
    " Most of this configuration, and more good stuff (I think) from:
    " http://www.codeography.com/2013/06/17/replacing-all-the-things-with-unite-vim.html
    "
    
    let g:unite_source_rec_max_cache_files = 0
    call unite#custom#source('file_rec,file_rec/async,grep', 'max_candidates', 0)
    
    " NOTE: '!' means project dir.
    
    nnoremap <leader>F :<C-u>Unite -buffer-name=files -start-insert file_rec/async:!<cr>
    nnoremap <leader>f :<C-u>Unite -buffer-name=files -start-insert file_rec/async<cr>
    nnoremap <leader>G :<C-u>Unite -buffer-name=grep -start-insert grep:!<cr>
    nnoremap <leader>g :<C-u>Unite -buffer-name=grep -start-insert grep:.<cr>
    nnoremap <leader>y :Unite history/yank<CR>
    
    call unite#custom#source(
                \ 'file_rec,file_rec/async,grep', 
                \ 'ignore_pattern', join([
                \     '\.svn/',
                \     '\.git/',
                \     '\.gradle/',
                \     '\.tfstate',
                \     '\Wbuild/',
                \     '\Wvendor/',
                \     '\Wnode_modules/',
                \     '\Wbower_components/',
                \ ], '\|'))
    
    call unite#custom#source(
                \ 'file,file_rec,file_rec/async', 'matchers',
                \ ['matcher_glob', 
                \  'matcher_hide_hidden_files',
                \  'matcher_hide_current_file'])
    
    "
    " On OS X install ag (a.k.a the silver searcher) to enhance performance 
    " (unite detects it automatically). Can be installed via brew.
    "
    
    if executable('ag')
    
        let g:unite_source_grep_command = 'ag'
        let g:unite_source_grep_recursive_opt = ''
        let g:unite_source_grep_default_opts = 
                    \ '-i --line-numbers --nocolor --nogroup --hidden ' .
                    \ '--ignore ''.hg'' ' .
                    \ '--ignore ''.svn'' ' .
                    \ '--ignore ''.git'' ' .
                    \ '--ignore ''.gradle'' ' .
                    \ '--ignore ''.bzr'' '
    
        let g:unite_source_rec_async_command = 
                    \ ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']
    
    elseif executable('ack')
    
        let g:unite_source_grep_command = 'ack'
        let g:unite_source_grep_recursive_opt = ''
        let g:unite_source_grep_default_opts = '--no-heading --no-color -k'
    
        let g:unite_source_rec_async_command = ['ack', '-f', '--nofilter']
    
    endif
    
    " Custom mappings for unite buffers
    autocmd FileType unite call s:unite_settings()
    
    function! s:unite_settings()
      " Play nice with supertab
      let b:SuperTabDisabled=1
    
      " Enable navigation with control-j and control-k in insert mode
      imap <buffer> <C-j> <Plug>(unite_select_next_line)
      imap <buffer> <C-k> <Plug>(unite_select_previous_line)
      imap <buffer> <C-q> <Plug>(unite_exit)
    endfunction
endfunction
" }}}


" Lazy Config {{{

function! g:LazyConfig()
    if exists(":Unite")
        call ConfigureUnite()
    endif
endfunction

augroup lazy_config
    autocmd!
    autocmd VimEnter * call g:LazyConfig()
augroup END

" }}}


"
" Dump output of an ex command to a new buffer in a new tab. Primarily useful
" for searching ex command output.
" Example:  TabMessage map
"

function! TabMessage(cmd)
  redir => message
  silent execute a:cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
    " use "new" instead of "tabnew" below if you prefer split windows instead of tabs
    tabnew
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
  endif
endfunction
command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)


"
" Wanted to have <c-n> run invnumber and <c-r> run invrelativenumber
" so I could toggle these independently, but <c-r> is redo and I didn't
" want to mess with that. With this function I can just cycle through
" using a single key.
"

function! CycleNumber() 
    if ! &number && ! &relativenumber
        set number
    elseif &number && ! &relativenumber
        set relativenumber
    else
        set nonumber
        set norelativenumber
    endif
endfunction


function! FormatCss()

    " TODO: Make sure we're in css buffer?

    "
    " Decontstruct the file to a consistent format from which
    " we can reliably reconstruct it.
    "

    silent %s///g                       " Just in case, delete any control-M's.
    silent %s/\s*$//g                     " Remove trailing whitespace on all lines.
    silent %s/\s\+/ /g                    " Replace multiple whitespace with single space.
    silent g/^\s*$/d                      " Delete all blank lines.
    silent %s/\n//g                       " Remove all carriage returns.

    "
    " Reformat the deconstructed file.
    "
    
    silent %s/\*\//*\/\r\r/g              " Two newlines after comment lines.
    silent %s/}/}\r\r/g                   " Two newlines after }.
    silent %s/{/{\r/g                     " Newline after {.
    silent %s/;/;\r/g                     " Newline after ;.
    silent %s/^\(\s*\S\+.*\)}$/\1\r}/g    " Newline before ).

    " TODO: There's a potential issue with sorting attributes in
    " that the original css could have multiple attributes, with
    " the last one not being terminated with a ';'. In this case,
    " sorting could move that attribute to the middle of the list,
    " which, without the ';', would be invalid html. Therefore,
    " we'll simply return here until we account for this.

    return

    "
    " Sort attributes.
    "

    " Start at top of file.
    normal gg

    while search("{$", "W")
        +1
        let first = line(".")

        /}
        -1
        let last = line(".")

        execute first . "," . last . "sort"
    endwhile

    " Indent file.
    normal gg=G

endfunction

nmap <silent> _c :call FormatCss()<CR>
" }}}

" TODO / etc {{{
"   - Groovy (gradle) syntax highlighting, indenting. Currently this pretty
"   much sucks.
"
"   - Copy character from line above (below?).
"
"   - Need to setup some keystrokes and/or function for using diff while
"   in vim. Vim can do this no problem, but the user experience is kind
"   of a pain in the ass. Here's (one way) how it works:
"     - open two buffers in vertical or horizontal split
"     - go to one buffer and do ':diffthis'
"     - go to other buffer and do ':diffthis'
"     - do your merges/edits (]c, [c to jump diffs, :diffget, :diffput
"     to merge across buffers
"     - go to one buffer and do ':diffoff'
"     - go to other buffer and do ':diffoff'
"
"   Wow, really? That kinda sucks. Here's my wish(ywashy)list:
"     - if in a split, keystroke will start diff for the two buffers in
"     the split
"     - if NOT in a split, keystroke will ~horizontally~ extend the
"     window and open the prior buffer in a vertical split
"     - while in the diff, a keystroke will turn off diff in both buffers,
"     closing the split (~ideally~ only if it opened the split to begin)
"     - while in diff mode, some handy dandy keystroke mappings would be
"     nice
"
"   - Add keystroke/functionality to insert a snippet for my code section
"   "headers". For example:
"
"   //----------------------------------------------------------------------
"   // [some text]
"   //----------------------------------------------------------------------
"
"   Hmmm... how to get comment characters for the above? Should this be a
"   snippet?
"
"   - plugins to look at:
"     - snipmate/ultisnips/neosnippet or something similar
"     - fugitive (git plugin)
"     - yankring or yankstack (or will unite suffice?)
"
"   - Better line wrapping in various filetypes. For some wordwrap
"   configurations this is not a big deal. For example '.txt' files I'd be
"   happy to have just wrap (inserting a newline) at 78 characters
"   (textwidth=78). For other filetypes, however, (specifically vimwiki), I
"   don't want wrapping via inserting linebreaks. This can only be achieved in
"   vim by setting 'wrapmargin=', which unfotunately is dependent on the
"   current window width. Need to figure out how to use something like the
"   following to respond to the resizing accordingly.
"
"   function! ResizeEvent()
"      let &lines = &lines - 1
"      execute '!echo "resizing "'.&columns . ' >> ~/test.txt'
"   endfunction
"   
"   autocmd VimResized * call ResizeEvent()
"
"   - Really need to get netrw whipped into shape, which seems to be
"     a much bigger pain in the ass than it should be. From this link...
"
"     http://vim.1045645.n5.nabble.com/Getting-out-of-netrw-td1156403.html
"
"     ... some things that might be useful:
"
"     function MyExplore()
"       tabnew
"       Explore
"       nmap <buffer> <leader>q :q<cr>
"     endfunction 
"
"     Run this ':topleft vsplit .'
"
"     And from...
"
"       http://stackoverflow.com/questions/21996768/how-do-you-change-the-root-of-the-netrw-tree-in-vim
"
"     ... when in tree mode, you can use :Ntree to reset the head of the
"     tree.
"
"   - Some interesting things I see in Nate Neff's vim github project:
"
"     <Space>    Show recent buffers at bottom of screen.
"                Use 'f' and 'b' to move back & forth between them.
"                Thanks to bufmru plugin author!
"
"     # NERD Commenter
"     
"      <leader>ci      Comment / Uncomment line(s)
"      <leader>cu      UN-comment line(s)
"      <leader>cl      Comment lines
"     
"     # Source Control
"     
"     (From VCSCommand.vim)
"     
"      <leader>nvc     Commit current file
"      <leader>nvd     Diff current file w/repository version
"      <leader>nvv     VimDiff current file w/repository version
"     
" }}}

" I (or preceeding blank) am only here to ensure last fold doesn't misbehave.
