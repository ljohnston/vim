"
" TODO {

"   - Refactor/Reformat.
"
"   - I use C-L and C-H to go back and forth between buffers.
"   When I hit a netrw buffer, however, these keys are remapped to
"   something else. Ideally, I'd like the netrw buffer to just go
"   away when I select a file.
"
"   - How can I "close" a netrw buffer (:bd doesn't even work!).
"
"   - Figure out how to get :bnext, :bprev to ignore directory buffers.
"   If I do this, would also want to figure out how to get buftabs to
"   not include directory tabs in its list.
"
"   - I currently have buftabs configured to put buffers on status
"   line. This causes me to lose useful stuff that should show up
"   there (e.g. line/column), though not always. Need to look into
"   this.
"
"   - Groovy (gradle) syntax highlighting, indenting. Currently this pretty
"   much sucks. Added the groovy.vim for indenting, but doesn't seem to do
"   _anything_. I'll leave it here, but this needs to be dealt with.
"
"   - Copy character from line above.
"
"   - Need a keystroke to go to matching paren (or...). Default is %.
"
"   - Fix issue with ';' after a 'f' waiting for the leader delay.
"
"   - Add keystroke/functionality to quickly search for my code section
"   "headers"...
"
"   - Need to setup some keystrokes and/or function for using diff while
"   in vim. Vim can do this no problem, but the user experience is kind
"   of a pain in the ass. Here's (one way) how it works:
"     - open two buffers in vertical or horizontal split
"     - go to one buffer and do ':diffthis'
"     - go to other buffer and do ':diffthis'
"     - do your merges/edits (]c, [c to jump diffs, :diffget, :diffput
"     to merge across buffers
"     - go to one buffer and do ':diffoff'
"     - go to other buffer and do ':diffoff'
"   Wow, really? That kinda sucks. Here's my wishlist:
"     - if in a split, keystroke will start diff for the two buffers in
"     the split
"     - if NOT in a split, keystroke will ~horizontally~ extend the
"     window and open the prior buffer in a vertical split
"     - while in the diff, a keystroke will turn off diff in both buffers,
"     closing the split (~ideally~ only if it opened the split to begin)
"     - while in diff mode, some handy dandy keystroke mappings would be
"     nice
"
"   //----------------------------------------------------------------------
"   // [some text]
"   //----------------------------------------------------------------------
"
"   - ... and something to insert a snippet for the above.
"
"   - New plugins I want to look at:
"     - vim-airline
"     - snipmate/ultisnips/neosnippet or something
"     - notes
"     - unite
"     - nerd-commenter
"     - supertab
"
"   - scratch buffer
"
"   - Really need to get netrw whipped into shape, which seems to be
"     a much bigger pain in the ass than it should be. From this link...
"
"     http://vim.1045645.n5.nabble.com/Getting-out-of-netrw-td1156403.html
"
"     ... some things that might be useful:
"
"     function MyExplore()
"       tabnew
"       Explore
"       nmap <buffer> <leader>q :q<cr>
"     endfunction 
"
"     Run this ':topleft vsplit .'
"
"     And from...
"
"       http://stackoverflow.com/questions/21996768/how-do-you-change-the-root-of-the-netrw-tree-in-vim
"
"     ... when in tree mode, you can use :Ntree to reset the head of the
"     tree.
"
"   - Some interesting things I see in Nate Neff's vim github
"     project:
"
"     <Space>    Show recent buffers at bottom of screen.
"                Use 'f' and 'b' to move back & forth between them.
"                Thanks to bufmru plugin author!
"
"     # NERD Commenter
"     
"      <leader>ci      Comment / Uncomment line(s)
"      <leader>cu      UN-comment line(s)
"      <leader>cl      Comment lines
"     
"     # Source Control
"     
"     (From VCSCommand.vim)
"     
"      <leader>nvc     Commit current file
"      <leader>nvd     Diff current file w/repository version
"      <leader>nvv     VimDiff current file w/repository version
"     
" }
"

"
" DEBUGGING/TROUBLESHOOTING - Can use 'echom "<msg>" for messages that
" may show up in the cmd window (if it exceeds cmdheight) and/or can be 
" displayed with :messages.
"

if has('vim_starting')
   set nocompatible

   " Required:
   set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Bundles here:
"NeoBundle 'Shougo/neosnippet.vim'
"NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'jeetsukumaran/vim-buffergator', { 'rev' : 'v2.4.0' }
NeoBundle 'scrooloose/syntastic', { 'rev' : 'v0.5.7' }
NeoBundle 'tpope/vim-surround.git', { 'rev' : 'v2.0' }
NeoBundle 'xolox/vim-notes.git', { 'rev' : '0.26' }
NeoBundle 'xolox/vim-misc.git', { 'rev' : '1.15' }


" These plugins don't have tags. :-(
NeoBundle 'rodjek/vim-puppet.git'
NeoBundle 'godlygeek/tabular.git'
NeoBundle 'flazz/vim-colorschemes.git'
NeoBundle 'duff/vim-scratch.git'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

"echom "unix:" . has('unix') 
"echom "mac:" . has('mac') 
"echom "gui_running:" . has('gui_running') 
"echom "gui_macvim:" . has('gui_macvim') 

"
" TODO: Refactor this. Needs to be up here so it's available when
" we need it.
"
" LOJ: Got the following colorscheme stuff from:
"
" https://github.com/megaannum/colorschemer/blob/master/autoload/colorschemer/viewer.vim
"

" used to capture the Color Scheme name in GetColorSchemeName
let s:colorsname = ""

"---------------------------------------------------------------------------
" s:GetColorSchemeName: {{{3
" Returns the current Color Scheme name.
" If g:colors_name exists, then return it otherwise return
" the result of the the command line: colorscheme.
" parameters: None
"---------------------------------------------------------------------------
function! s:GetColorSchemeName()
  if exists("g:colors_name")
    return g:colors_name
  else
    if exists("s:colorsname")
      unlet s:colorsname
    endif

" capture result of executing ":highlight"
    execute "redir => s:colorsname"
    silent execute "colorscheme"
    execute "redir END"
    let s:colorsname = s:colorsname[1:]
    return s:colorsname
  endif
endfunction

" General {
    syntax on

    filetype plugin indent on

    " (Mostly) bash-like autocompletion.
    set wildmenu
    set wildmode=longest,list,full

    set backspace=indent,eol,start "a better backspace
    set fileformats=unix 
    set hidden "change buffers without saving

    " Detect external file changes
    set autoread

    " Silence the damn bell
    "set noerrorbells 
    "set visualbell
    "set t_vb=
    set noerrorbells visualbell t_vb=
    autocmd GUIEnter * set visualbell t_vb=

    " This will help keep netrw from displaying the annoying
    " 'Press ENTER or type command to continue' prompt all the time.
    " This solution, however, is generally annoying.
    set cmdheight=3

    " This seems to cause problems in console vim.
    "if exists('+autochdir')
    "  set autochdir "always switch to current buffer directory 
    "endif
    autocmd BufEnter * silent! lcd %:p:h

    "System clipboard integration.
    if has('unix') && exists('+xterm_clipboard')
        set clipboard+=unnamedplus
    else
        set clipboard+=unnamed
    endif

    if has('unix')
        " Removing this from the list first will ensure it gets
        " pre-pended to the list in the ^= line (if it's already
        " anywhere in the list that line is a no-op).
        set directory-=~/tmp
        set directory^=~/tmp//

        set backupdir-=~/tmp
        set backupdir^=~/tmp//
    endif
" }



" UI {
    set hlsearch
    set ruler "show cursor position
    set scrolloff=3 "context lines when scrolling
    set sidescrolloff=5 "context columns when scrolling
    set guioptions-=T "turn off the toolbar
    
    " cursor movement
    set nostartofline
    set virtualedit=all
" }



" Formatting {
    set expandtab
    set shiftwidth=4
    set softtabstop=4
" }



" Autocommands {
    " Ruby {
        " ruby standard 2 spaces, always
        au BufRead,BufNewFile *.rb,*.rhtml setlocal shiftwidth=2 
        au BufRead,BufNewFile *.rb,*.rhtml setlocal softtabstop=2 
    " }

    " gradle {
        au BufNewFile,BufRead *.gradle setf groovy
    " }
    
    " shell scripts {
    "    autocmd FileType sh setlocal shiftwidth=2
    "    autocmd FileType sh setlocal softtabstop=2
    " }

    " reread .vimrc on save
    au! BufWritePost .vimrc source % 

    "
    " wrap lines in .txt files.
    " When writing text-based documentation, automatically wrap text.
    " Ideally _don't_ wrap text for entering strings to be entered on
    " the command-line. We should be able to achieve this by setting
    " # and $ as comment characters and not including 'c' in the
    " formatoptions. Looks like I may be understanding this incorrectly
    " and it may not be possible. Rather it appears that 't' is _all_
    " text (including comments), and 'c' is comments only.
    "

    au BufRead,BufNewFile *.txt setlocal textwidth=72
    au BufRead,BufNewFile *.txt setlocal formatoptions=tq

    "
    " Turn off handling of '-' as a bullet (sort of).
    " Without this, we get (for wrapped lines):
    " - some text ...
    "   another line ...
    " yet another line.
    "
    " Note that we can get _all_ of the above lines to indent within
    " the paragraph by setting 'autoindent'.
    "

    au BufRead,BufNewFile *.txt setlocal comments-=fb:-
"}



" Buffergator {

    " Don't allow buffergator to extend window.
    let g:buffergator_autoexpand_on_split = 0

    " Sort buffer list by most recently used.
    "let g:buffergator_sort_regime = "basename"
    "let g:buffergator_sort_regime = "filepath"
    let g:buffergator_sort_regime = "mru"

    " Though I'd prefer the viewport on the left, it's not
    " wide enough (nor is it practical to _make_ it wide enough)
    " to show full file details.
    let g:buffergator_viewport_split_policy = "T"
    let g:buffergator_split_size = 18
" }

" Buftabs {
"    set laststatus=2
"    let g:buftabs_in_statusline=1
"    let g:buftabs_only_basename=1
" }


" Netrw {
    " Defect. See: https://groups.google.com/forum/#!topic/vim_use/XNOcLYsgk8Y
    "let g:netrw_liststyle = 3 " 0=thin 1=long 2=wide 3=tree        
    let g:netrw_keepdir = 0
" }


" Syntastic {
"    let g:syntastic_enable_signs=1
" }

" Keys {
    let mapleader = ","
    let g:mapleader = ","

    nmap <leader>w :w!<cr>
    nmap <leader>W :wa!<cr>
    nmap <leader>c :set cursorcolumn!<CR>

    " Disable highlight when <leader><cr> is pressed
    map <silent> <leader>/ :noh<cr>

    nmap <leader>e :Explore<CR>
    
    " After installing syntatic, :E causes an error because synastic
    " defines the ':Errors' command. Thought this would get us back
    " on track, but it doesn't work. Gotta use :Ex, or the <leader>e
    " I mapped above.
    "cmap E<CR> Ex<CR>
    
    " toggle line numbers
    nmap <leader>n :set invnumber<CR>

    " buffer switching
    map <C-h> :bp<cr>
    map <C-l> :bn<cr>

    " TODO: Get this working. Update: apparently can't remap , and .
    "map <C-,> #
    "map <C-.> *
" }



" GUI {
    if has("gui_running")

        set background=dark

        "colorscheme candy 
        colorscheme molokai 

        let cname = s:GetColorSchemeName()

        if cname == 'molokai'
    
            " Seems most colorschemes use crappy cursor line colors.
            highlight CursorLine guibg=Gray30
            highlight CursorColumn guibg=Gray30
            highlight ColorColumn guibg=DarkSlateGray
    
            " molokai's comments are too dark.
            highlight Comment guifg=SkyBlue3
    
            " molokai's visual selection needs more contrast.
            highlight Visual guifg=Gray30 guibg=NavajoWhite

        endif

        " 
        " For a good resource regarding how to pic and set a font, see:
        "
        "   http://www.scholarslab.org/grad-student-research/vim-gui-font-magic/
        "
        
        "
        " NOTE: 'gui_macvim' and 'unix' are not exclusive (i.e. 
        " has('gui_macvim') also has('unix')).
        "

        if has('gui_macvim') 
            set transparency=10
            set guifont=Courier\ New:h13
            set columns=120
            set lines=64
        elseif has('unix') 
            set guifont="Courier 10 Pitch":h9
            set columns=120
            set lines=64
        endif

        " This is primarily to keep buffergator (assuming it comes up
        " on the left side of the screen... which it does) from adding
        " a scrollbar to its window.
        set guioptions-=L
    
        " hightlight current line
        set cursorline

        set colorcolumn=81
    endif
" }



"------------------------------------------------------------
" [Functions]
"------------------------------------------------------------


function! FormatCss()

    " TODO: Make sure we're in css buffer?

    "
    " Decontstruct the file to a consistent format from which
    " we can reliably reconstruct it.
    "

    silent %s///g                       " Just in case, delete any control-M's.
    silent %s/\s*$//g                     " Remove trailing whitespace on all lines.
    silent %s/\s\+/ /g                    " Replace multiple whitespace with single space.
    silent g/^\s*$/d                      " Delete all blank lines.
    silent %s/\n//g                       " Remove all carriage returns.

    "
    " Reformat the deconstructed file.
    "
    
    silent %s/\*\//*\/\r\r/g              " Two newlines after comment lines.
    silent %s/}/}\r\r/g                   " Two newlines after }.
    silent %s/{/{\r/g                     " Newline after {.
    silent %s/;/;\r/g                     " Newline after ;.
    silent %s/^\(\s*\S\+.*\)}$/\1\r}/g    " Newline before ).

    " TODO: These's a potential issue with sorting attributes in
    " that the original css could have multiple attributes, with
    " the last one not being terminated with a ';'. In this case,
    " sorting could move that attribute to the middle of the list,
    " which, without the ';', would be invalid html. Therefore,
    " we'll simply return here until we account for this.

    return

    "
    " Sort attributes.
    "

    " Start at top of file.
    normal gg

    while search("{$", "W")
        +1
        let first = line(".")

        /}
        -1
        let last = line(".")

        execute first . "," . last . "sort"
    endwhile

    " Indent file.
    normal gg=G

endfunction

nmap <silent>  ;c  :call FormatCss()<CR>

