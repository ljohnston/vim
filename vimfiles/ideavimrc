source ~/.vimrc

" TODO:
"

" (emulated) plugins:
" set NERDTree (enabled via .vimrc)
" set surround (enabled via .vimrc)
" set commentary (enabled via .vimrc)

let mapleader=<Space>

set clipboard+=unnamed
set clipboard+=ideaput

set ideajoin
set idearefactormode=keep

" Force no bells (similar in ~/.vimrc doesn't work here).
set noerrorbells
set visualbell

" Unmap these (Fzf recursive files/search, which we don't need
" in IntelliJ anyway) from .vimrc so <Leader>r works here.
unmap <Leader>rf
unmap <Leader>rs

"
" Action descriptions can be found here:  https://bit.ly/3mzJpDA
"

" Can't map <c-cr> in vim, but we can in IdeaVim.
map <c-cr> <Action>(Console.Jdbc.Execute)

" SelectInProjectView is a much better experience than
" NERDTreeFocus or some other fake "NERDTree" behavior
" as it focuses the tree on the file currently open in
" the editor.
nmap <Leader>e <Action>(SelectInProjectView)

" Switcher shows open buffers.
nmap <Leader>b <Action>(Switcher)
nmap <Leader>r <Action>(RecentFiles)
nmap <Leader>f <Action>(FileStructurePopup)

nmap <Leader>c <Action>(ChooseRunConfiguration)

nmap <Leader>gb <Action>(Annotate)
nmap <Leader>gm <Action>(Git.Menu)
nmap <Leader>gs <Action>(ActivateCommitToolWindow)

" Search in project maps.
nmap <Leader>pc <Action>(GotoClass)         
nmap <Leader>pf <Action>(GotoFile) 
nmap <Leader>ps <Action>(FindInPath) 

" Open project.
nmap <Leader>po <Action>(ManageRecentProjects)

" Switch projects.
nmap <Leader>pp <Action>(OpenProjectWindows)

nmap <Leader>vv :action Tool_External Tools_mvim<CR>

" It's not AltBuf, but in IntelliJ, I think it'll do.
nmap <Leader><Leader> :b#<CR>

nmap <Leader>dn <Action>(NextDiff)
nmap <Leader>dp <Action>(PreviousDiff)

" For some reason, using <Action>(...) ends up moving the 
" cursor one character forward after the action is complete. 
" While annoying, this is usually benign. In the case of
" CollapseRegion, however, this causes the region to be
" re-expanded immediately after being collapsed. Using
" :action ... works around this.
nmap zc :action CollapseRegion<CR>
nmap zo :action ExpandRegion<CR>

nmap <s-h> <Action>(Back)
nmap <s-l> <Action>(Forward)

" In vim, <c-j> and <c-k> are mapped to scroll the screen,
" leaving the cursor line in place. In IntelliJ, I use
" Karabiner to map <c-h>, <c-j>, <c-k>, <c-l> to the
" corresponding arrow keys. So to get the desired <c-j>
" and <c-k> behavior here we need to map the arrow keys.
nmap <Up> 1<c-u>
nmap <Down> 1<c-d>

nmap <c-s>; mxA;<Esc>`x
nmap <c-s><c-;> mxA;<Esc>`x
imap <c-s>; <Esc>lmxA;<Esc>`xi
imap <c-s><c-;> <Esc>lmxA;<Esc>`xi

nmap <c-s><ctrl-,> <l
nmap <c-s><ctrl-.> >l
imap <c-s><ctrl-,> <c-o><l
imap <c-s><ctrl-.> <c-o>>l

nmap ,b <Action>(BuildMenu)
nmap ,f <Action>(ShowIntentionActions)
nmap ,l <Action>(RestoreDefaultLayout)

" I also have the following configuration in IntelliJ:
" - Advanced Settings > Editor Tabs > Keep pinned tabs on the left
" - Keymap > Other > Tabs > Select Tab #1 mapped to ^.
"   There is an "action" for this in IdeaVim so ideally
"   I wouldn't have to set it in IntelliJ config, but it 
"   doesn't work.
nmap ,p <Action>(PinActiveEditorTab)

nmap ,ee <Action>(HideAllWindows)
nmap ,ev <Action>(SplitVertically)
nmap ,eh <Action>(SplitHorizontally)
nmap ,eu <Action>(Unsplit)

" ,q? (quit?) here as I want ,c? (close?) for code actions
nmap ,qa <Action>(CloseAllEditors)
nmap ,qo <Action>(CloseAllEditorsButActive)
nmap ,qp <Action>(CloseProject)
nmap ,qr <Action>(CloseAllToTheRight)
nmap ,qu <Action>(CloseAllUnpinnedEditors)
nmap ,ql <Action>(HideActiveWindow)

" mnemonic here is "quit non-project" editors
" While I suppose you could have readonly project files, 
" this is as close as I could get to what I was after.
nmap ,qn <Action>(CloseAllReadonly)

" This will close a git diff tab (and ???)
nmap ,qc <Action>(CloseContent)

nmap ,ci <Action>(OptimizeImports)
nmap ,cm <Action>(ImplementMethods)
nmap ,co <Action>(OverrideMethods)
nmap ,cr <Action>(RefactoringMenu)

" Note: ctrl-enter works for this as well.
nmap ,cg <Action>(Generate)

nmap ,gd <Action>(GotoDeclarationOnly)
nmap ,gi <Action>(GotoImplementation)
nmap ,gs <Action>(GotoSuperMethod)
nmap ,gu <Action>(ShowUsages)
nmap ,gU <Action>(FindUsages)

nmap ,rc <Action>(RunClass)
nmap ,rm <Action>(RunMenu)
nmap ,rr <Action>(Run)
nmap ,rd <Action>(Debug)
nmap ,rs <Action>(Stop)<Action>(Stop)

nmap ,rt <Action>(RerunTests)
nmap ,rf <Action>(RerunFailedTests)

nmap ,db <Action>(ToggleLineBreakpoint)
nmap ,dc <Action>(DebugClass)
nmap ,de <Action>(ToggleBreakpointEnabled)
nmap ,dm <Action>(DebugMainMenu)
nmap ,dr <Action>(Resume)
nmap ,ds <Action>(Stop)<Action>(Stop)
nmap ,dv <Action>(ViewBreakpoints)
nmap ,dx <Action>(EvaluateExpression)
nmap ,d. <Action>(ShowExecutionPoint)

nmap ,si <Action>(StepInto)
nmap ,so <Action>(StepOver)
nmap ,su <Action>(StepOut)
nmap ,sc <Action>(RunToCursor)

nmap ,tb <Action>(ActivateBuildToolWindow)
nmap ,tc <Action>(ActivateCommitToolWindow)
nmap ,td <Action>(ActivateDebugToolWindow)
nmap ,tf <Action>(ActivateFindToolWindow)
nmap ,tg <Action>(ActivateGradleToolWindow)
nmap ,tp <Action>(ActivateProblemsViewToolWindow)
nmap ,tr <Action>(ActivateRunToolWindow)
nmap ,ts <Action>(ActivateServicesToolWindow)
nmap ,tt <Action>(ActivateTerminalToolWindow)
nmap ,tv <Action>(ActivateVersionControlToolWindow)

" with ,td already mapped, mnemonic here: j = jdbc
nmap ,tj <Action>(ActivateDatabaseToolWindow)

nmap ,tl <Action>(JumpToLastWindow)
