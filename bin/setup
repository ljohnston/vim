#!/usr/bin/env bash

# Is git installed?
type git >/dev/null 2>&1 || { echo >&2 "'git' not installed. Aborting..."; exit 1; }


usage() {
    echo "Usage: $0 install|clean-install"
    echo "NOTE: Re-running 'install' will update all plugins."
    exit 1
}


[ $# -eq 1 ] || usage


action_header() {
    msg=$1
    msg_len=${#msg}

    echo -e "\n${msg}"
    printf %${msg_len}s |tr ' ' '-' ;echo
}


install_neobundle() {
    [ -d $VIM_DIR/bundle ] || mkdir -p $VIM_DIR/bundle
    
    if [ -d $VIM_DIR/bundle/neobundle.vim ]; then
        action_header "Updating neobundle..."
        cd $VIM_DIR/bundle/neobundle.vim
        git pull
        cd - >/dev/null
    else
        action_header "Installing neobundle..."
        git clone https://github.com/Shougo/neobundle.vim $VIM_DIR/bundle/neobundle.vim
    fi
}


install_fonts_mac() {
    rsync --times $FONTS ~/Library/Fonts >/dev/null
}


install_fonts_linux() {
    rsynced_files=$(rsync --times --itemize-changes $FONTS ~/.fonts)

    [ $? -eq 0 ] || exit 1

    if [ -n "${rsynced_files}" ]; then
        fc-cache -fv ~/.fonts >/dev/null
    fi
}


install_fonts() {

    os=$(uname -s)

    case $os in 
        Darwin)
            install_fonts_mac
            ;;
        Linux)
            install_fonts_linux
            target='~/.fonts'
            ;;
        *)
            echo -e "Unsupported OS '${os}'. Aborting..."
            ;;
    esac
}


install_dotfiles() {
    
    #
    # Link up ~/.vimrc to vimfiles/vimrc in the project.
    # If it already exists as a link, we'll delete it and recreate it.
    # If it already exists and is not a link, we'll leave it, causing the 
    # subsequent link creation to fail (with an error message we'll want
    # to see).
    #
    
    [ -L ~/.vimrc ] && rm ~/.vimrc
    ln -s $VIM_DIR/vimfiles/vimrc ~/.vimrc
    
    # Vrapper is the eclipse vim plugin
    [ -L ~/.vrapperrc ] && rm ~/.vrapperrc
    ln -s $VIM_DIR/vimfiles/vrapperrc ~/.vrapperrc
}


install_plugins() {

    #
    # Installing simply by firing up Vim works without issue. Via the
    # command-line, however, we may ses lots of the following warnings:
    #
    # not found in 'runtimepath': "autoload/vimproc.vim"
    #
    # The vimproc.vim warning seems to be most prevalent, but there are
    # others (eclim, for example, if we're using that). I think it's
    # somewhat dependent on what plugins we're installing. Regardless,
    # they all seem to be benign when installing the plugins this way.
    #
    # We'll simply grep these out. In addtion, we can minimize the 
    # vimproc.vim messages by specifically installing it first (which I 
    # think may be a good idea anyway - I see this in the neobundle help).
    #
    # I've also seen the 'packpath' message from time to time.
    #
    
    action_header "Installing plugins (vimproc)..."
    $VIM_DIR/bundle/neobundle.vim/bin/neoinstall vimproc.vim 2>&1 \
        |grep -v "not found in 'runtimepath'" \
        |grep -v "not found in 'packpath'" 
    
    action_header "Installing plugins (all remaining)..."
    $VIM_DIR/bundle/neobundle.vim/bin/neoinstall 2>&1 \
        |grep -v "not found in 'runtimepath'" \
        |grep -v "not found in 'packpath'" 
}


install() {
   install_neobundle
   install_fonts
   install_dotfiles
   install_plugins
}


SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
VIM_DIR="$( cd $SCRIPT_DIR/.. && pwd )"

FONTS="${VIM_DIR}/fonts/powerline-fonts-SourceCodePro/*.otf"

case "$1" in 
    install)
        install
        ;;
    clean-install)
        [ -d $VIM_DIR/bundle ] && rm -rf $VIM_DIR/bundle 2>/dev/null
        install
        ;;
    *)
        echo "Unknown option '$1'. Aborting..."
        exit 1
esac

echo

exit 
rm -rf $VIM_DIR/bundle 2>/dev/null
mkdir -p $VIM_DIR/bundle

